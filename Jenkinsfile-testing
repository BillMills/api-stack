pipeline {    

    agent any    
    
    environment {
        DOCKER_TLS_VERIFY='1'                                                                                               
        COMPOSE_TLS_VERSION='TLSv1_2'                                                                                       
        DOCKER_CERT_PATH='/home/jenkins/jenkinscerts'
        DOCKER_HOST='tcp://ec2-3-218-141-222.compute-1.amazonaws.com:443'
        DTR_FQDN_PORT='ec2-3-218-141-222.compute-1.amazonaws.com:4443'
        KUBECONFIG='/home/jenkins/jenkinscerts/kube.yml'
	MAJORMINOR='0.0'
    }

    stages {
        stage('Unit') {
            environment {
                DTR_ACCESS_KEY = credentials('jenkins-dtr-access-token')
            }
            steps {
                sh 'docker login -u jenkins -p ${DTR_ACCESS_KEY} ${DTR_FQDN_PORT}'
                sh 'docker image pull ${DTR_FQDN_PORT}/engineering/api-test:${TAG}'
                sh 'docker container run ${DTR_FQDN_PORT}/engineering/api-test:${TAG}'
            }
        }
	
        stage('Integration') {
            environment {
                DTR_ACCESS_KEY = credentials('jenkins-dtr-access-token')
            }
            steps {
                // deploy our application for integration testing
                sh 'BUILDNO=$(echo ${TAG} | sed "s/.*-//"); \
                    helm install integrationtest --namespace test --wait helm --set API.tag=rc-1.0-build-${BUILDNO}'
                // make sure all pods are up before we try to run the integration tests
                sh 'DBPOD=$(kubectl get pod -l app=db -n test \
                        -o jsonpath="{.items[0].metadata.name}"); \
                    APIPOD=$(kubectl get pod -l app=api -n test \
                        -o jsonpath="{.items[0].metadata.name}"); \
                    kubectl wait --timeout=60s --for=condition=Ready pod/${DBPOD} -n test; \
                    kubectl wait --timeout=60s --for=condition=Ready pod/${APIPOD} -n test'

                // run integration tests
                sh 'BUILDNO=$(echo ${TAG} | sed "s/.*-//"); \
                    kubectl run integration-${BUILDNO} --image \
                    ${DTR_FQDN_PORT}/engineering/api-build:integration-1.0-build-${BUILDNO} \
                    -n test --restart=Never --attach=True;'
            }
        }

	stage('Finalization') {
	    environment {
	      DTR_ACCESS_KEY=credentials('jenkins-dtr-access-token')
	      DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=credentials('jenkins-content-trust')
	      GIT_TOKEN=credentials('github-token')
	    }
	    steps {
                sh 'docker login -u jenkins -p ${DTR_ACCESS_KEY} ${DTR_FQDN_PORT} ; \
	            BUILDNO=$(echo ${TAG} | sed "s/.*-//"); \
		    curl -k https://${DTR_FQDN_PORT}/ca \
		        -o /usr/local/share/ca-certificates/${DTR_FQDN_PORT}.crt ; \
		    update-ca-certificates; \
		    docker trust key load ${DOCKER_CERT_PATH}/key.pem; \
		    docker image pull \
		        ${DTR_FQDN_PORT}/engineering/api-build:rc-1.0-build-${BUILDNO}; \
	            docker image tag \
	                ${DTR_FQDN_PORT}/engineering/api-build:rc-1.0-build-${BUILDNO} \
	                ${DTR_FQDN_PORT}/engineering/api:1.0 ; \
                    docker trust sign ${DTR_FQDN_PORT}/engineering/api:1.0 ; \
		    helm package --set API.tag=1.0 \
		        --set API.repo=engineering/api \
			--version ${MAJORMINOR}.${BUILDNO} \
			--destination releases helm; \
	            pwd; \
		    ls; \
		    git branch; \
		    git log;'
	    }
	}
	

    }


    post {
        always{
	    sh 'rm -rf /var/jenkins_home/workspace/testing; \
		    helm uninstall integrationtest --namespace test'
	}
    }
}
